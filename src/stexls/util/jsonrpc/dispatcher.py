from __future__ import annotations
from typing import Union, Any, Awaitable, Optional
from collections import defaultdict
import asyncio
import logging
import itertools
from .core import *
from .hooks import extract_methods
from .protocol import JsonRpcProtocol

log = logging.getLogger(__name__)

__all__ = ['Dispatcher']


class Dispatcher:
    ''' A dispatcher is a hook that allows sending user messages to a connection
        between a client and the server.
        The dispatcher behaves like a normal python object, except that
        the called methods are done somewhere different and have to wait
        until the message is send, handled and the response returned.
    '''
    def __init__(self, connection: JsonRpcProtocol):
        """Initializes the given connection protocol.
        
        Initialization is done by simply registering all @method hooks with the json-rpc connection.
        The connection is stored and used by @request and @notification hooks in order to
        delegate these calls to the connection.
        
        Args:
            connection (JsonRpcProtocol): Target connection to delegate method calls to,
                and provide method handlers for.
        """
        self.connection = connection
        self.__request_id_generator = itertools.count(1)
        for name, callback in extract_methods(self).items():
            connection.on(name, callback)

    async def request(self, method: str, params: Union[list, dict, None] = None) -> Any:
        """Sends a request object over the given json-rpc protocol.

        The id for the request will be automatically generated by incrementing, starting from 1.
        
        Args:
            method (str): Method name to request.
            params (Union[list, dict, None], optional): Valid json-rpc parameter object. Defaults to None.
        
        Returns:
            Any: The return result of the remote method.
        """
        id = next(self.__request_id_generator)
        log.info('Dispatching request %s(%s) with id %i.', method, params, id)
        message = RequestObject(id, method, params)
        return await self.connection.send(message)
        

    async def notification(self, method: str, params: Union[list, dict, None] = None):
        """Sends a notification over the connection.
        
        Args:
            method (str): Remote method name.
            params (Union[list, dict, None], optional): Valid json-rpc parameters. Defaults to None.
        """
        ' Sends a notification message using the dispatch handler and returns immediately. '
        log.info('Dispatching notification %s(%s).', method, params)
        message = NotificationObject(method, params)
        await self.connection.send(message)
